import type { RequiredNonNullable, RequiredNonNullableExcept } from '$types';

export interface VerbatimProcessOptions {
    filename: string;
}

export type FullVerbatimConfiguration =
    RequiredNonNullable<VerbatimConfiguration>;
export interface VerbatimConfiguration {
    /**
     * Verbatim environments.
     *
     * @remarks The keys are the names of the environments, and the values
     * describe how to process the inner content of the environment.
     *
     * @example
     * ```ts
     * { Verbatim: { escapeBraces: true, escapeHtml: true } }
     * ```
     *
     * This environment would then be used as follows:
     * ```html
     * <Verbatim>
     * Content.
     * </Verbatim>
     * ```
     *
     * @defaultValue
     * ```ts
     * {
     *     Code: {
     *         processInner: 'code',
     *         defaultAttributes: {
     *             inline: false,
     *             lang: 'plaintext',
     *         }
     *     },
     *     TeX: {
     *         processInner: 'advancedTex',
     *         aliases: ['tex', 'LaTeX', 'latex'],
     *         defaultAttributes: {
     *             inline: false,
     *         }
     *     }
     * }
     * ```
     */
    verbatimEnvironments?:
        | undefined
        | Record<string, VerbatimEnvironmentConfiguration>;
}

/**
 * Interface used to describe how to escape a string.
 */
export interface SimpleEscapeInstruction {
    /**
     * Braces (aka. curly brackets) should be escaped:
     * - `{` → `&lbrace;`
     * - `}` → `&rbrace;`
     *
     * @defaultValue `false`
     */
    escapeBraces?: boolean | undefined;

    /**
     * HTML should be escaped:
     * - `<` → `&lt;`
     * - `>` → `&gt;`
     * - `&` → `&amp;`
     * - `"` → `&quot;`
     * - `'` → `&apos;`
     *
     * @defaultValue `true`
     */
    escapeHtml?: boolean | undefined;
}

/**
 * Type describing the possible ways to process the inner content of a verbatim
 * environment.
 */
export type VerbatimProcessInner =
    | 'code'
    | 'noop'
    | SimpleEscapeInstruction
    | VerbatimProcessInnerFn;

/**
 * Function which takes the inner content and the attributes of a verbatim
 * environment and returns the processed content (including HTML tag).
 *
 * @param inner - The inner content of the component.
 * @param attributes - The attributes of the component.
 *
 * @example
 * ```ts
 * (inner, attributes) => {
 *     let attrStrings = Object.entries(attributes).map(
 *         ([key, value]) => `${key}="${String(value)}"`
 *     );
 *     const attrString = attrStrings.length > 0 ? ' ' + attrStrings.join(' ') : '';
 *     return `<pre${attrString}><code>${inner}</code></pre>`;
 * }
 * ```
 */
export type VerbatimProcessInnerFn = (
    inner: string,
    attributes: Record<string, string | number | boolean | null | undefined>,
) => string;

export type FullVerbatimEnvironmentConfiguration = RequiredNonNullableExcept<
    VerbatimEnvironmentConfiguration,
    'component'
>;

export interface VerbatimEnvironmentConfiguration {
    /**
     * How to process the inner content of the component.
     *
     * - `'code'`: Process the inner content as code.
     * - `'noop'`: Leave the inner content as-is.
     * - `SimpleEscapeInstruction`: Escape the inner content according to the
     *   given instructions.
     * - `(inner: string, attributes: Record<string, string | undefined>) => string`:
     *   A function which takes the inner content and the attributes of the
     *   component and returns the processed content.
     *
     * @defaultValue `{ escapeBraces: true, escapeHtml: true }`
     */
    processInner?: VerbatimProcessInner | undefined;

    /**
     * @example
     * ```ts
     * Example: {
     *     defaultAttributes: {
     *        inline: 'false',
     *        lang: 'plaintext'
     *     }
     * }
     * ```
     *
     * Now, the following code block:
     *
     * ```html
     * <Example>
     * Content.
     * </Example>
     * ```
     *
     * ...would be processed the same way as this one:
     *
     * ```html
     * <Code lang="plaintext" inline="false">
     * Content.
     * </Code>
     * ```
     *
     * **NB**: In the processing of these blocks, values like
     * `"true"`, `"false"`, `"null"`, `"undefined"`, `"NaN"`, or `"123"`
     * are each treated as their respective primitive values by
     * {@link VerbatimEnvironmentConfiguration.processInner | `processInner`}
     * (although they will still be strings in the HTML generated by SvelTeX).
     */
    defaultAttributes?: Record<
        string,
        string | boolean | number | null | undefined
    >;

    /**
     * Attributes that should be forwarded to the output.
     *
     * @defaultValue `'all'`
     * @see
     * {@link attributeForwardingBlocklist | `attributeForwardingBlocklist`},
     * which takes precedence over this setting.
     */
    attributeForwardingAllowlist?: 'all' | string[];

    /**
     * Attributes that should not be forwarded to the output.
     *
     * @defaultValue `['lang', 'inline', 'info']`
     * @see {@link attributeForwardingAllowlist | `attributeForwardingAllowlist`}
     */
    attributeForwardingBlocklist?: string[];

    /**
     * HTML tags that should be treated as aliases for this component.
     *
     * @defaultValue `[]`
     *
     * @remarks
     * The output will remain the same regardless of which, if any, alias
     * was used.
     */
    aliases?: string[] | undefined;

    /**
     * @defaultValue `undefined`, which means the key of this object in
     * `verbatimEnvironments` is used.
     *
     * @example
     * ```ts
     * Example: {
     *     component: 'Code',
     *     processInner: 'code',
     * }
     * ```
     *
     * Now, the following code block:
     *
     * ```html
     * <Example lang="js">
     * let a
     * </Example>
     * ```
     *
     * ...would be processed the same way as this one:
     *
     * ```html
     * <Code lang="js">
     * <span class="hljs-keyword">let</span> a
     * </Code>
     * ```
     */
    component?: string | undefined;

    /**
     * Whether to wrap the "inner output" in a `<code>` tag (or `<pre><code>`,
     * depending on whether the `inline` attribute is `true` (defaults to
     * `false`)).
     *
     * @defaultValue `false`
     *
     * @remarks
     * The {@link CodeConfiguration.wrap | `CodeConfiguration.wrap`} function of
     * the code handler of the Sveltex instance is used to determine *how* to
     * wrap the output of the component.
     *
     * @example
     * ```ts
     * Example: {
     *     processInner: 'code',
     *     wrap: true,
     * }
     * ```
     *
     * Now, the following code block...
     *
     * ```html
     * <Example lang="js">
     * let a
     * </Example>
     * ```
     *
     * ...would be transformed into...
     *
     * ```html
     * <Example lang="js">
     * <pre><code class="language-js">
     * <span class="hljs-keyword">let</span> a
     * </code></pre>
     * </Example>
     * ```
     *
     * Meanwhile, if `wrap` had been set to `false`, the output would've been:
     *
     * ```html
     * <Example lang="js">
     * <span class="hljs-keyword">let</span> a
     * </Example>
     * ```
     */
    wrap?: boolean | undefined;

    /**
     * Whether to respect self-closing tags.
     *
     * - `true`: If the component is found in a SvelTeX-enabled file in a
     *   self-closing form (e.g., `<Example />`), the transformed component will
     *   still be self-closing.
     * - `false`: If the component is found in a SvelTeX-enabled file in a
     *   self-closing form (e.g., `<Example />`), the transformed component will
     *   be closed with a closing tag (e.g., `<Example></Example>`).
     *
     * @defaultValue `true`
     * @see {@link selfCloseOutputWith | `selfCloseOutputWith`}
     *
     * @example
     * If, for some reason, you wanted to manually insert line breaks with
     * `<br />` tags, but wanted to invoke these with a different name, you
     * could, for example, set `respectSelfClosing` to `true`:
     * ```ts
     * break: {
     *     processInner: 'noop',
     *     respectSelfClosing: true,
     *     component: 'br',
     *     selfCloseOutputWith: 'auto',
     * }
     * ```
     *
     * Now we'd have the following transformations:
     *
     * - `<break />` → `<br />`
     * - `<break/>` → `<br/>`
     * - `<break></break>` → `<br></br>` (just to clarify the behavior, you
     *   shouldn't do this in this particular case).
     */
    respectSelfClosing?: boolean;

    /**
     * Controls whether or not to add a space before the closing slash in the
     * self-closing transformed output of this component.
     *
     * - `' />'`: always add a space before the closing slash in self-closing
     *   tags.
     * - `'/>'`: never add a space before the closing slash in self-closing
     *   tags.
     * - `'auto'`: Add a space iff the user did so in the input.
     *
     * @defaultValue `'auto'`
     * @see {@link respectSelfClosing | `respectSelfClosing`}
     * @example
     * Suppose a verbatim environment is defined as follows:
     *
     * ```ts
     * break: {
     *     processInner: 'noop',
     *     respectSelfClosing: true,
     *     component: 'br',
     * }
     * ```
     *
     * The following transformations would then occur, depending on the chosen
     * value for `selfCloseOutputWith` and the input provided:
     *
     * | `selfCloseOutputWith` | Input             | Output      |
     * |:---------------------:|:------------------|:------------|
     * | `'auto'`              | `<brake />`       | `<br />`    |
     * | `'auto'`              | `<brake/>`        | `<br/>`     |
     * | `' />'`               | `<brake />`       | `<br />`    |
     * | `' />'`               | `<brake/>`        | `<br />`    |
     * | `'/>'`                | `<brake />`       | `<br/>`     |
     * | `'/>'`                | `<brake/>`        | `<br/>`     |
     * | *(any)*               | `<brake></brake>` | `<br></br>` |
     *
     * NB: The last row is included just to clarify the behavior; having
     *     `<br></br>` in the output may not be desirable.
     */
    selfCloseOutputWith?: ' />' | '/>' | 'auto';
}
