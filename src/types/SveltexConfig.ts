/**
 * This file, `SveltexConfig.d.ts`, contains type definitions for the
 * `SveltexConfig` interface, which is used to configure the SvelTeX
 * preprocessor.
 *
 * Author: N. V. Lang GitHub: [nvlang](https://github.com/nvlang)
 *
 * @privateRemarks
 * The TSDoc comments in this file are very important for the IntelliSense the
 * user will see when configuring SvelTeX in their Svelte project.
 */
// import type { DvisvgmOptions, TexComponentConfig } from '$types';
import { RequiredNonNullable } from '$types';
import type {
    MarkdownHandler,
    CodeHandler,
    AdvancedTexHandler,
    TexHandler,
} from '$handlers';

import type {
    AdvancedTexBackend,
    AdvancedTexConfiguration,
    CodeBackend,
    MarkdownBackend,
    MarkdownConfiguration,
    TexBackend,
    TexConfiguration,
    CodeConfiguration,
    FullMarkdownConfiguration,
    FullAdvancedTexConfiguration,
    FullCodeConfiguration,
    FullTexConfiguration,
    TexComponentConfig,
} from '$types';

/**
 * Supported TeX engines.
 */
export type SupportedTexEngine =
    | 'lualatex'
    | 'pdflatex'
    | 'tex'
    | 'latexmk'
    | 'lualatexmk';

/**
 * Sveltex configuration options, with all properties required.
 */
export interface FullSveltexConfig<
    M extends MarkdownBackend,
    C extends CodeBackend,
    T extends TexBackend,
    A extends AdvancedTexBackend,
> {
    general: NonNullable<
        RequiredNonNullable<SveltexConfig<M, C, T, A>['general']>
    >;
    markdown: FullMarkdownConfiguration<M>;
    code: FullCodeConfiguration<C>;
    tex: FullTexConfiguration<T>;
    advancedTex: FullAdvancedTexConfiguration<A>;
}
// {
//     general: Required<Exclude<SveltexConfig<M, C, T, A>['general'], undefined>>;
//     markdown: MarkdownConfiguration<M>;
//     code: CodeConfiguration<C>;
//     tex: TexConfiguration<T>;
//     advancedTex: Required<AdvancedTexConfiguration<A>>;
// }

/**
 * Interface used to describe how to escape a string.
 */
export interface SimpleEscapeInstruction {
    /**
     * Braces (aka. curly brackets) should be escaped:
     * - `{` → `&lbrace;`
     * - `}` → `&rbrace;`
     */
    escapeBraces?: boolean;
    escapeHtml?: boolean;
}

export type VerbatimProcessInner =
    // | 'tex' | 'advancedTex' | 'markdown'
    | 'code'
    | 'noop'
    | SimpleEscapeInstruction
    | ((inner: string, attributes: Record<string, unknown>) => string);

export type VerbatimEnvironment = VerbatimEnvironmentCode | TexComponentConfig;

export type VerbatimEnvironmentCode =
    | VerbatimProcessInner
    | {
          /**
           * How to process the inner content of the component.
           * - `'tex'`: Render the inner content using a Node.js TeX engine.
           * - `'advancedTex'`: Render the inner content using a local TeX
           */
          processInner: VerbatimProcessInner;

          /**
           * @example
           * ```ts
           * Example: {
           *     defaultAttributes: {
           *        inline: false,
           *        lang: 'plaintext'
           *     }
           * }
           * ```
           *
           * Now, the following code block:
           *
           * ```html
           * <Example>
           * Content.
           * </Example>
           * ```
           *
           * ...would be processed the same way as this one:
           *
           * ```html
           * <Code lang="plaintext" inline="false">
           * Content.
           * </Code>
           * ```
           *
           * **NB**: In the processing of the second block, values like
           * `"true"`, `"false"`, `"null"`, `"undefined"`, `"NaN"`, or `"123"`
           * are each treated as their respective primitive values by
           * {@link processInner | `processInner`} (although they will still be
           * strings in the HTML generated by SvelTeX).
           */
          defaultAttributes?: Record<string, string>;

          attributeForwardingAllowlist?: 'all' | string[];

          /**
           * @defaultValue `['lang', 'inline', 'info']`
           */
          attributeForwardingBlocklist?: string[];

          /**
           * HTML tags that should be treated as aliases for this component.
           *
           * @defaultValue `[]`
           *
           * @remarks
           * The output will remain the same regardless of which, if any, alias
           * was used.
           */
          aliases?: string[];

          /**
           * @defaultValue The key of this object in `verbatimEnvironments`.
           *
           * @example
           * ```ts
           * Example: {
           *     component: 'Code',
           *     processInner: 'code',
           * }
           * ```
           *
           * Now, the following code block:
           *
           * ```html
           * <Example lang="js">
           * let a
           * </Example>
           * ```
           *
           * ...would be processed the same way as this one:
           *
           * ```html
           * <Code lang="js">
           * <span class="hljs-keyword">let</span> a
           * </Code>
           * ```
           */
          component?: string;
      };

export interface BackendChoices<
    M extends MarkdownBackend,
    C extends CodeBackend,
    T extends TexBackend,
    A extends AdvancedTexBackend,
> {
    advancedTexBackend: A;
    customMarkdownHandler: M extends 'custom'
        ? MarkdownHandler<'custom'>
        : never;
    customCodeHandler: C extends 'custom' ? CodeHandler<'custom'> : never;
    customTexHandler: T extends 'custom' ? TexHandler<'custom'> : never;
    customAdvancedTexHandler: A extends 'custom'
        ? AdvancedTexHandler<'custom'>
        : never;
}

/**
 * Sveltex configuration options.
 */
export interface SveltexConfig<
    M extends MarkdownBackend,
    C extends CodeBackend,
    T extends TexBackend,
    A extends AdvancedTexBackend,
> {
    /**
     * Configuration options for the markdown parser (e.g., `marked`, `unified`,
     * `markdown-it`, or `micromark`).
     *
     * ⚠ **Warning**: These options, and their meaning, depend on the specific
     * markdown backend in use. For documentation of the options beyond what
     * IntelliSense may provide, please refer to the documentation of the
     * backend in question:
     * - `marked`: [Docs](https://marked.js.org/using_advanced) /
     *   [GitHub](https://github.com/markedjs/marked)
     * - `markdown-it`: [Docs](https://markdown-it.github.io/markdown-it/) /
     *   [GitHub](https://github.com/markdown-it/markdown-it)
     * - `micromark`: [GitHub](https://github.com/micromark/micromark)
     * - `unified`: [Website](https://unifiedjs.com/) /
     *   [GitHub](https://github.com/unifiedjs/unified)
     */
    markdown?: MarkdownConfiguration<M>;

    /**
     * Configuration options for the syntax highlighter (e.g., `highlight.js` or
     * `starry-night`).
     *
     * ⚠ **Warning**: These options, and their meaning, depend on the specific
     * "code backend" (i.e., syntax highlighter) in use. For documentation of
     * the options beyond what IntelliSense may provide, please refer to the
     * documentation of the backend in question:
     *
     * - `highlight.js`: [Docs](https://highlightjs.readthedocs.io/en/latest/) /
     *   [GitHub](https://github.com/highlightjs/highlight.js) /
     *   [Website](https://highlightjs.org)
     * - `starry-night`: [GitHub](https://github.com/wooorm/starry-night)
     * - `prismjs`: [Docs](https://prismjs.com/) /
     *   [GitHub](https://github.com/PrismJS/prism)
     */
    code?: CodeConfiguration<C>;

    /**
     * Configuration options for the TeX processor (e.g., KaTeX or MathJax).
     * This is the TeX processor that will be used to, for example, render math
     * in SvelTeX files.
     *
     * ⚠ **Warning**: These options depend on the specific TeX backend in use.
     * For example, if you are using KaTeX, different options will be available
     * than if you are using MathJax. Similarly, the meanings of the options may
     * differ between backends, since they are taken directly from the backend
     * in question (or at most slightly adapted). For documentation of the
     * options beyond what IntelliSense may provide, please refer to the
     * documentation of the backend in question:
     *
     * - `katex`: [Docs](https://katex.org/docs/options.html) /
     *   [GitHub](https://github.com/KaTeX/KaTeX)
     * - `mathjax-full` (latest): [Docs](https://docs.mathjax.org/en/latest/) /
     *   [GitHub](https://github.com/mathjax/MathJax-src)
     * - `mathjax-node` (v2): [Docs](https://docs.mathjax.org/en/v2.7-latest/) /
     *   [GitHub](https://github.com/mathjax/MathJax-node)
     */
    tex?: TexConfiguration<T>;

    /**
     * Configuration options for the advanced TeX processor.
     */
    advancedTex?: AdvancedTexConfiguration<A>;

    general?: {
        /**
         * Code which will surround the preprocessor output.
         *
         * @remarks Because of how SvelTeX works internally, these "delimiters"
         * can appear more than once within the output of a single file.
         *
         * @example
         * ```ts
         * {
         *     wrap: {
         *         begin: '<div class="sveltex-output">',
         *         end: '</div>',
         *     }
         * }
         * ```
         */
        wrap?:
            | undefined
            | {
                  /**
                   * @defaultValue `''` (empty string)
                   */
                  begin: string;

                  /**
                   * @defaultValue `''` (empty string)
                   */
                  end: string;
              };

        /**
         * File extensions which will be processed by the preprocessor.
         *
         * @remarks Be sure to include these in your `svelte.config.js` file.
         *
         * @defaultValue `['.sveltex']`
         */
        extensions?: undefined | `.${string}`[];

        /**
         * Verbatim environments.
         *
         * @remarks The keys are the names of the environments, and the values
         * describe how to process the inner content of the environment.
         *
         * @example
         * ```ts
         * { Verbatim: { escapeBraces: true, escapeHtml: true } }
         * ```
         *
         * This environment would then be used as follows:
         * ```html
         * <Verbatim>
         * Content.
         * </Verbatim>
         * ```
         *
         * @defaultValue
         * ```ts
         * {
         *     Code: {
         *         processInner: 'code',
         *         defaultAttributes: {
         *             inline: false,
         *             lang: 'plaintext',
         *         }
         *     },
         *     TeX: {
         *         processInner: 'advancedTex',
         *         aliases: ['tex', 'LaTeX', 'latex'],
         *         defaultAttributes: {
         *             inline: false,
         *         }
         *     }
         * }
         * ```
         */
        verbatimEnvironments?:
            | undefined
            | Record<string, VerbatimEnvironmentCode>;

        /**
         * General options surrounding SvelTeX's LaTeX support.
         */
        tex?:
            | undefined
            | {
                  delimiters?: {
                      /**
                       * Delimiter to use to render inline TeX blocks (e.g., `$x^2$`).
                       * @defaultValue `['$', '$']`.
                       */
                      inline?: [string, string] | undefined;

                      /**
                       * Delimiter to use to render display TeX blocks (e.g.,
                       * `$$x^2$$`).
                       * @defaultValue `['$$', '$$']`.
                       */
                      display?: [string, string] | undefined;
                  };
              };
    };
}

// export interface SveltexConfigMarked {
//     /**
//      * {@link https://marked.js.org/using_advanced#options | Options} for the
//      * {@link https://github.com/markedjs/marked | Marked} markdown parser.
//      */
//     marked: MarkedConfig;
// }

// /**
//  * Marked configuration.
//    */
// export interface MarkedConfig {
//     /**
//      * Options to pass to the Marked parser.
//      */
//     options?: MarkedOptions;

//     /**
//      * Extensions to use with the Marked parser.
//      *
//      * @remarks Applied in the order they are listed, with
//      * `marked.use(...extensions)`.
//        */
//     extensions?: MarkedExtension[];

//     /**
//      * Whether to use the default extensions.
//        */
//     useDefaultExtensions?: | boolean |
//     Partial<Record<DefaultMarkedExtensions, boolean>>;

//     /**
//      * Advanced options.
//        */
//     extensionSettings?: { smartypants?: { active?: boolean; } &
//     GeneralExtensionSettings;
//         /**
//          * @remarks
//          * To actually color the output, you need to use CSS.
//          */
//         highlight?: {
//             /**
//              * Highlighting function to use.
//              *
//              * @defaultValue `'starry-night'`
//              */
//             parser?:
//                 | SupportedSyntaxHighlighter
//                 | SyncHighlightingFunction
//                 | undefined;

//             classPrefix?: string;

//             parserOptions?: { prismjs?: { plugins?: string[];
//                 };

//                 /**
//                  * Options for `starry-night`. See:
//                  * - NPM:
//                      [@wooorm/starry-night](https://npmjs.com/package/@wooorm/starry-night)
//                  * - GitHub:
//                      [wooorm/starry-night](https://github.com/wooorm/starry-night)
//                      */
//                 'starry-night'?: { customLanguages?: Grammar[];
//                 };

//                 /**
//                  * Options for `highlight.js`. See:
//                  * - NPM: https://npmjs.com/package/highlight.js
//                  * - GitHub: https://github.com/highlightjs/highlight.js
//                  * - Website: https://highlightjs.org/
//                  * - Docs: https://highlightjs.readthedocs.io/
//                      */
//                 'highlight.js'?: {
//                     /**
//                      * @defaultValue `'hljs-'`
//                      */
//                     classPrefix?: string;
//                 };
//             };

//             /**
//              * Overrides for the default parsers.
//              * - Key: language tag, like `'python'`, or array of synonymous
//              *   language tags, like `['python', 'py']`.
//              * - Value: parser.
//                  */
//             parserOverrides?: Record< string | string[],
//             SyncHighlightingFunction
//             >;

//             /**
//              * The `<code>` tag's class attribute will be the concatenation of
//              * `langPrefix` and the language tag (if an array of language tags
//              * was provided, the first one will be used for this).
//              *
//              * @defaultValue `'language-'`
//              * @example
//              * ```html
//              * <pre><code class="language-python"> ...
//              * ```
//              */
//             langPrefix?: string;
//         } & GeneralExtensionSettings;
//     };
// }

// export type SupportedSyntaxHighlighter = | 'highlight.js' | 'prismjs' |
// 'starry-night';

// interface GeneralExtensionSettings {
//     /**
//      * Whether to use the extension.
//      */
//     active?: boolean;
// }

// type DefaultMarkedExtensions = 'highlight' | 'math' | 'katex' | 'tasklist';

// /**
//  * A SvelTeX component — i.e., a component which can be used in SvelTeX files
//  * — whose contents will be rendered using a TeX engine, after which the
//    entire
//  * component gets replaced by an `<img>` tag referencing the rendered TeX
//    file
//  * (an SVG).
//  *
//  * @param name - Name of the component (used to define an HTML tag for
//    SvelTeX
//  * files).
//  * @param engine - TeX engine to use to render the component.
//  * @param preamble - Preamble to include in the TeX file.
//  * @param outputDirectory - Output directory.
//  * @param advanced - Advanced options.
//    */
// export interface TexComponent {
//     /**
//      * Name of the component (used to define an HTML tag for SvelTeX files).
//      *
//      * @example 'TikZ'
//      */
//     name: string;

//     /**
//      * TeX engine to use to render the component.
//      *
//      * @defaultValue `'lualatex'`
//        */
//     engine?: SupportedTexEngine = 'lualatex';

//     /**
//      * Preamble to include in the TeX file (everything after
//      * `\documentclass{...}` but before `\begin{document}`).
//      *
//      * @defaultValue
//      * ```tex
//      * \usepackage{microtype}
//      * ```
//      */
//     preamble?: string = '\\usepackage{microtype}';

//     /**
//      * Output directory.
//      *
//      * @defaultValue `'static/sveltex/'`
//      *
//      * @example 'static/sveltex/tikz/'
//        */
//     outputDirectory?: string = `static/sveltex/`;

//     advanced?: {
//         /**
//          *
//          */
//         compilationOptions?: {
//             /**
//              * If `false`, shell escape is disabled, meaning that the TeX engine
//              * will not be able to execute shell commands (i.e., e.g., the
//              * `minted` LaTeX package won't work).
//              *
//              * If equal to an array of strings, the array will be interpreted as
//              * an allowlist of CLI commands. For example, to use the
//              * aforementioned `minted` package, one might set this to
//              * `['pygmentize']`.
//              *
//              * @defaultValue `false`
//              */
//             shellEscape?: string[] | false = false;

//             /**
//              * If `true`, auxiliary files will be removed from the output
//              * directory after compilation.
//              *
//              * @defaultValue `false`
//                */
//             cleanup?: boolean = false;
//         };

//         /**
//          *
//          * @defaultValue dvisvgm
//            */
//         conversionCommand?: string;
//     };
// }
